package com.emerson.identity.identity_service.services;

import com.emerson.identity.identity_service.services.contracts.QRCodeService;
import com.j256.twofactorauth.TimeBasedOneTimePasswordUtil;
import lombok.AllArgsConstructor;
import org.springframework.security.crypto.codec.Hex;
import org.springframework.security.crypto.encrypt.BytesEncryptor;
import org.springframework.stereotype.Service;

import java.nio.charset.StandardCharsets;
import java.security.GeneralSecurityException;

@Service
@AllArgsConstructor
public class QRCodeServiceImp implements QRCodeService {

    private final BytesEncryptor bytesEncryptor;


    @Override
    public boolean checkCode(String code, String userSecret){
        try{
            String secret = new String(bytesEncryptor.decrypt(Hex.decode(userSecret)), StandardCharsets.UTF_8);
            return TimeBasedOneTimePasswordUtil.validateCurrentNumber(secret, Integer.parseInt(code), 10000);
        }catch (IllegalArgumentException e){
            return false;
        }catch (GeneralSecurityException e){
            throw new IllegalArgumentException(e);
        }
    }

    @Override
    public String generateSecret(){
        //Generate a secret key for the user and store it in the database when registering
        return TimeBasedOneTimePasswordUtil.generateBase32Secret();
    }

    @Override
    public String generateQrCodeImg(String userKey, String base32Secret ){
        /*
            Generate a QR code URL that the user can scan with Google Authenticator.
            QR code is created using the Secret and Keyid (name shown in authenticator app)
            User uses the image to load the secret key into his authenticator application.
         */
        return TimeBasedOneTimePasswordUtil.qrImageUrl(userKey, base32Secret);
    }

    @Override
    public String generateCodeFromSecret( String base32Secret ){
        //Creates a code using the userSecret, this code has to match the code generated by the authenticator app
        try {
            return TimeBasedOneTimePasswordUtil.generateCurrentNumberString(base32Secret);
        } catch (GeneralSecurityException e) {
            throw new RuntimeException(e);
        }
    }
}
/*
To get this to work for you:
 1. Use generateSecret() to generate a secret key in base-32 format for the user. For example: "NY4A5CPJZ46LXZCP"
 2. Store the secret key in the database associated with the user account.
 3. Generate and display the QR image which is returned in the form of a URL by the generateQrCodeImg() to the user.
 4. User scans the image to LOAD the secret key into his authenticator application.


Whenever the user logs in:
The user enters the number from the authenticator application into the login form on the web server.
The web server fetches the secret associated with the user account from the database.
The server compares the user input with the output from generateCodeFromSecret(...) using the checkCode()
If they are equal then the user is allowed to log in.
 */